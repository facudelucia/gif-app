{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","cats","onSubmit","type","placeholder","onChange","target","value","onClick","GifGridItem","imagen","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAyCeA,EAtCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAO/BC,EAAe,SAACC,GAClBA,EAAEC,iBACuB,KAAtBJ,EAAWK,SACdP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,OACtCL,EAAc,MAGlB,OAEY,0BAAMM,SAAUL,GACZ,2BACIM,KAAK,OACLC,YAAY,eACZC,SAjBM,SAACP,GACvBF,EAAcE,EAAEQ,OAAOC,UAkBX,2BACIJ,KAAK,SACLI,MAAM,SAENC,QAASX,MCblBY,EAdK,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAcD,EAAdC,MAAOC,EAAOF,EAAPE,IAEd,OAEQ,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAKA,K,uBCTRK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,0DAC4CO,UAAUF,GADtD,sDAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QARvB,kBAYZY,GAZY,4CAAH,sDCwBLM,EApBM,SAACb,GAAc,IAAD,EAELvB,mBAAS,CAC/B6B,KAAM,GACNQ,SAAS,IAJkB,mBAExBC,EAFwB,KAEjBC,EAFiB,KAiB/B,OAVAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAACd,IAEGe,GCEIK,EAnBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,EACCa,EAAab,GAAhCW,EADkB,EACvBL,KAAaQ,EADU,EACVA,QAEpB,OACI,kBAAC,WAAD,KACI,wBAAIlB,UAAU,qCAAqCI,GAClDc,GAAW,uBAAGlB,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAENe,EAAOH,KAAI,SAAAf,GACR,OAAO,kBAAC,EAAD,CAAa4B,IAAK5B,EAAOiB,GAAIjB,OAAQA,UCKrD6B,EAfM,WAAO,IAAD,EACa7C,mBAAS,CAAC,YADvB,mBAChB8C,EADgB,KACJ/C,EADI,KAGvB,OACI,kBAAC,WAAD,KACI,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC3B+C,EAAWf,KAAI,SAACR,GACb,OAAO,kBAAC,EAAD,CAASqB,IAAKrB,EAAUA,SAAUA,SCPzDwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.5284badf.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    \r\n    const handleChangeInput = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(inputValue.trim() === \"\") return;\r\n        setCategories(cats => [inputValue, ...cats]);\r\n        setInputValue(\"\");\r\n    }\r\n\r\n    return ( \r\n        \r\n                <form onSubmit={handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Busca un gif\"\r\n                        onChange={handleChangeInput}\r\n                    />\r\n                    <input \r\n                        type=\"submit\"\r\n                        value=\"Search\"\r\n                        \r\n                        onClick={handleSubmit}\r\n                    />\r\n                </form>\r\n\r\n       \r\n     );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n \r\nexport default AddCategory;","import React from 'react';\r\n\r\nconst GifGridItem = ({imagen}) => {\r\n    const {title, url} = imagen;\r\n\r\n    return ( \r\n        \r\n            <div className=\"card animate__animated animate__bounce\">\r\n                <img src={url} alt={title} />\r\n                <p >{title}</p>\r\n            </div>\r\n        \r\n        \r\n     );\r\n}\r\n \r\nexport default GifGridItem;","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=aQoWnsfi4cnfVHS3H2vCwIcsL6JzB2UP`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n \r\nexport default useFetchGifs;","import React, {Fragment} from 'react'\r\nimport GifGridItem from './GifGridItem'\r\nimport useFetchGifs from \"../hooks/useFetchGifs\"\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const {data:images, loading} = useFetchGifs(category)\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                \r\n                    {images.map(imagen => {\r\n                        return <GifGridItem key={imagen.id} imagen={imagen} />\r\n                    })}\r\n                \r\n            </div> \r\n        </Fragment>\r\n        \r\n     );\r\n}\r\n\r\nexport default GifGrid;","import React,{Fragment, useState} from 'react';\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([\"Welcome\"])\r\n  \r\n    return ( \r\n        <Fragment>\r\n            <h2>GifRandomApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories}/>\r\n            {categories.map((category) => {\r\n                return <GifGrid key={category} category={category}/>\r\n            })}\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./components/GifExpertApp\"\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}